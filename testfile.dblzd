<Header: Tree(size:63), lookback buffer len: 1000, Tree dotgraph: 
digraph G {

node1 [label = ""];
node2 [label = ""];
node3 [label = ""];
node4 [label = "I 0b01001001"];
node5 [label = ""];
node6 [label = "1 0b00110001"];
node7 [label = "d 0b01100100"];
node8 [label = "a 0b01100001"];
node9 [label = ""];
node10 [label = ""];
node11 [label = "e 0b01100101"];
node12 [label = ""];
node13 [label = ""];
node14 [label = ". 0b00101110"];
node15 [label = "! 0b00100001"];
node16 [label = "h 0b01101000"];
node17 [label = ""];
node18 [label = ""];
node19 [label = "S 0b01010011"];
node20 [label = "g 0b01100111"];
node21 [label = ""];
node22 [label = "n 0b01101110"];
node23 [label = "2 0b00110010"];
node24 [label = ""];
node25 [label = ""];
node26 [label = "  0b00100000"];
node27 [label = ""];
node28 [label = "\r 0b00001101"];
node29 [label = "\n 0b00001010"];
node30 [label = ""];
node31 [label = ""];
node32 [label = ""];
node33 [label = "o 0b01101111"];
node34 [label = "- 0b00101101"];
node35 [label = "m 0b01101101"];
node36 [label = ""];
node37 [label = ""];
node38 [label = ""];
node39 [label = "l 0b01101100"];
node40 [label = ""];
node41 [label = "T 0b01010100"];
node42 [label = ""];
node43 [label = "u 0b01110101"];
node44 [label = "7 0b00110111"];
node45 [label = ""];
node46 [label = "k 0b01101011"];
node47 [label = ""];
node48 [label = "r 0b01110010"];
node49 [label = ""];
node50 [label = ", 0b00101100"];
node51 [label = ""];
node52 [label = "D 0b01000100"];
node53 [label = "END"];
node54 [label = ""];
node55 [label = ""];
node56 [label = "i 0b01101001"];
node57 [label = ""];
node58 [label = "s 0b01110011"];
node59 [label = ""];
node60 [label = "? 0b00111111"];
node61 [label = "y 0b01111001"];
node62 [label = "t 0b01110100"];

node0 -> node1 [label="0"];
node1 -> node2 [label="0"];
node2 -> node3 [label="0"];
node3 -> node4 [label="0"];
node3 -> node5 [label="1"];
node5 -> node6 [label="0"];
node5 -> node7 [label="1"];
node2 -> node8 [label="1"];
node1 -> node9 [label="1"];
node9 -> node10 [label="0"];
node10 -> node11 [label="0"];
node10 -> node12 [label="1"];
node12 -> node13 [label="0"];
node13 -> node14 [label="0"];
node13 -> node15 [label="1"];
node12 -> node16 [label="1"];
node9 -> node17 [label="1"];
node17 -> node18 [label="0"];
node18 -> node19 [label="0"];
node18 -> node20 [label="1"];
node17 -> node21 [label="1"];
node21 -> node22 [label="0"];
node21 -> node23 [label="1"];
node0 -> node24 [label="1"];
node24 -> node25 [label="0"];
node25 -> node26 [label="0"];
node25 -> node27 [label="1"];
node27 -> node28 [label="0"];
node27 -> node29 [label="1"];
node24 -> node30 [label="1"];
node30 -> node31 [label="0"];
node31 -> node32 [label="0"];
node32 -> node33 [label="0"];
node32 -> node34 [label="1"];
node31 -> node35 [label="1"];
node30 -> node36 [label="1"];
node36 -> node37 [label="0"];
node37 -> node38 [label="0"];
node38 -> node39 [label="0"];
node38 -> node40 [label="1"];
node40 -> node41 [label="0"];
node40 -> node42 [label="1"];
node42 -> node43 [label="0"];
node42 -> node44 [label="1"];
node37 -> node45 [label="1"];
node45 -> node46 [label="0"];
node45 -> node47 [label="1"];
node47 -> node48 [label="0"];
node47 -> node49 [label="1"];
node49 -> node50 [label="0"];
node49 -> node51 [label="1"];
node51 -> node52 [label="0"];
node51 -> node53 [label="1"];
node36 -> node54 [label="1"];
node54 -> node55 [label="0"];
node55 -> node56 [label="0"];
node55 -> node57 [label="1"];
node57 -> node58 [label="0"];
node57 -> node59 [label="1"];
node59 -> node60 [label="0"];
node59 -> node61 [label="1"];
node54 -> node62 [label="1"];
}
Code map: Val : 114 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000001110110", bit_size: 7 }
Val : 110 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000001110", bit_size: 5 }
Val : 50 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000001111", bit_size: 5 }
Val : 33 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000010101", bit_size: 6 }
Val : 45 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000011001", bit_size: 5 }
Val : 83 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000001100", bit_size: 5 }
Val : 73 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000000000", bit_size: 4 }
Val : 10 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000001011", bit_size: 4 }
Val : 121 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000011110111", bit_size: 8 }
Val : 104 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000001011", bit_size: 5 }
Val : 116 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000011111", bit_size: 5 }
Val : 107 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000111010", bit_size: 6 }
Val : 63 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000011110110", bit_size: 8 }
Val : 44 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000011101110", bit_size: 8 }
Val : 105 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000111100", bit_size: 6 }
Val : 103 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000001101", bit_size: 5 }
Val : 46 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000010100", bit_size: 6 }
Val : 111 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000011000", bit_size: 5 }
Val : 13 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000001010", bit_size: 4 }
Val : 101 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000000100", bit_size: 4 }
Val : 115 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000001111010", bit_size: 7 }
Val : 109 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000001101", bit_size: 4 }
Val : 97 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000000001", bit_size: 3 }
Val : 68 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000111011110", bit_size: 9 }
Val : 100 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000000011", bit_size: 5 }
Val : 108 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000111000", bit_size: 6 }
Val : 32 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000000100", bit_size: 3 }
Val : 55 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000011100111", bit_size: 8 }
Val : 49 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000000000010", bit_size: 5 }
Val : 84 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000001110010", bit_size: 7 }
Val : 117 -> Bits { set_bits: "0000000000000000000000000000000000000000000000000000000011100110", bit_size: 8 }
END: Bits { set_bits: "0000000000000000000000000000000000000000000000000000000111011111", bit_size: 9 }
><15>11100111011110111101111011110111101111011111010101100001000011101100011000011101101010111010101101100001110110011101111172222222
I am Sam

Sam (10,4: "I am")(18,4: "\r\n\r\n")<4>11100100101100111111111011111000That(14,4: " Sam")<5>1100100001100100111010101011010111011111-I-am!(33,16: "\nThat Sam-I-am!\r")<11>1011000010000011110001000111011000111111001110001111001110100100101010111111111101111100
I do not like
t(35,15: "hat Sam-I-am!\r\n")<7>10101011111011110110001001111011111000111001101110111110
Do you(74,5: " like")<13>10001101111011001000100011101000100011010110111110101000010111000011100010110011101111101101110111110000 green eggs and ham?(18,4: "\r\n\r\n")(66,13: "I do not like")<5>1001111101011010011011110111011101111100 them,(38,9: " Sam-I-am")<2>0101001110111110.(64,15: "\r\nI do not like")(110,19: " green eggs and ham")<7>01010010101011000100001000010000100001000111101111100000.
11111a